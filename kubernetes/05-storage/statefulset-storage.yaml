# StatefulSet with persistent storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web-statefulset
  labels:
    app: web-server
spec:
  serviceName: web-headless
  replicas: 3
  selector:
    matchLabels:
      app: web-server
  template:
    metadata:
      labels:
        app: web-server
    spec:
      containers:
      - name: nginx
        image: nginx:1.21
        ports:
        - containerPort: 80
          name: http
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command: ["/bin/bash"]
        args:
          - -c
          - |
            # Create unique content for each pod
            mkdir -p /usr/share/nginx/html
            echo "<h1>Hello from $POD_NAME</h1>" > /usr/share/nginx/html/index.html
            echo "<p>Pod Identity: $POD_NAME</p>" >> /usr/share/nginx/html/index.html
            echo "<p>Started at: $(date)</p>" >> /usr/share/nginx/html/index.html
            
            # Start nginx
            nginx -g 'daemon off;'
        
        volumeMounts:
        - name: web-storage
          mountPath: /usr/share/nginx/html
        - name: config-storage
          mountPath: /etc/config
        
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
  
  # Volume Claim Templates - each pod gets its own PVC
  volumeClaimTemplates:
  - metadata:
      name: web-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard-rwo"
      resources:
        requests:
          storage: 5Gi
  - metadata:
      name: config-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard-rwo"
      resources:
        requests:
          storage: 1Gi
---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: web-headless
  labels:
    app: web-server
spec:
  clusterIP: None  # Headless service
  selector:
    app: web-server
  ports:
  - port: 80
    targetPort: 80
    name: http
---
# Regular service for external access
apiVersion: v1
kind: Service
metadata:
  name: web-service
  labels:
    app: web-server
spec:
  selector:
    app: web-server
  ports:
  - port: 80
    targetPort: 80
    name: http
  type: ClusterIP
---
# Database StatefulSet with persistent storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-cluster
  labels:
    app: mysql-cluster
spec:
  serviceName: mysql-cluster-headless
  replicas: 3
  selector:
    matchLabels:
      app: mysql-cluster
  template:
    metadata:
      labels:
        app: mysql-cluster
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:8.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index
          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "rootpassword123"
        - name: MYSQL_DATABASE
          value: "appdb"
        - name: MYSQL_USER
          value: "appuser"
        - name: MYSQL_PASSWORD
          value: "apppass123"
        ports:
        - containerPort: 3306
          name: mysql
        
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        
        readinessProbe:
          exec:
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
      
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql-config
  
  volumeClaimTemplates:
  - metadata:
      name: mysql-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard-rwo"
      resources:
        requests:
          storage: 20Gi
---
# MySQL Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  my.cnf: |
    [mysqld]
    default-storage-engine=INNODB
    character-set-server=utf8
    bind-address=0.0.0.0
    max_connections=200
    innodb_buffer_pool_size=256M
---
# Headless service for MySQL StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: mysql-cluster-headless
  labels:
    app: mysql-cluster
spec:
  clusterIP: None
  selector:
    app: mysql-cluster
  ports:
  - port: 3306
    targetPort: 3306
    name: mysql
