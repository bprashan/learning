# Redis Cluster for Session Management and Caching
# High-availability Redis cluster with 3 masters and 3 replicas

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: ecommerce-prod
data:
  redis.conf: |
    # Redis Cluster Configuration
    port 6379
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    cluster-announce-ip ${POD_IP}
    cluster-announce-port 6379
    cluster-announce-bus-port 16379
    
    # Security
    requirepass redis_secret123
    masterauth redis_secret123
    
    # Memory management
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    
    # Logging
    loglevel notice
    logfile ""
    
    # Network
    timeout 0
    tcp-keepalive 300
    
    # Optimization
    tcp-backlog 511
    databases 16
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    
    # Slow log
    slowlog-log-slower-than 10000
    slowlog-max-len 128

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: ecommerce-prod
type: Opaque
data:
  password: cmVkaXNfc2VjcmV0MTIz  # redis_secret123

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: ecommerce-prod
  labels:
    app: redis
    role: cluster
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  - port: 16379
    targetPort: 16379
    protocol: TCP
    name: redis-bus
  selector:
    app: redis

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-lb
  namespace: ecommerce-prod
  labels:
    app: redis
    role: cluster
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: ecommerce-prod
  labels:
    app: redis
    role: cluster
spec:
  serviceName: redis-cluster
  replicas: 6  # 3 masters + 3 replicas
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      # Anti-affinity to spread Redis nodes across different nodes
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 80
            preference:
              matchExpressions:
              - key: disk-type
                operator: In
                values:
                - ssd
      initContainers:
      - name: redis-init
        image: redis:7-alpine
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Initializing Redis configuration..."
          cp /tmp/redis.conf /data/redis.conf
          chown 999:999 /data/redis.conf
          echo "Redis configuration initialized"
        volumeMounts:
        - name: redis-config
          mountPath: /tmp/redis.conf
          subPath: redis.conf
        - name: redis-data
          mountPath: /data
        securityContext:
          runAsUser: 0  # Need root to change ownership
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 16379
          name: redis-bus
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - redis-server
        - /data/redis.conf
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - redis_secret123
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - redis_secret123
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: redis-cluster-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
# Job to initialize Redis cluster
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-init
  namespace: ecommerce-prod
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: redis-cluster-init
        image: redis:7-alpine
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Waiting for Redis pods to be ready..."
          sleep 30
          
          # Get Redis pod IPs
          REDIS_NODES=""
          for i in $(seq 0 5); do
            POD_IP=$(nslookup redis-cluster-$i.redis-cluster.ecommerce-prod.svc.cluster.local | grep Address | tail -1 | awk '{print $2}')
            if [ ! -z "$POD_IP" ]; then
              REDIS_NODES="$REDIS_NODES $POD_IP:6379"
            fi
          done
          
          echo "Creating Redis cluster with nodes: $REDIS_NODES"
          redis-cli -a redis_secret123 --cluster create $REDIS_NODES --cluster-replicas 1 --cluster-yes
          
          echo "Redis cluster initialization completed!"

---
# PodDisruptionBudget for Redis cluster
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-cluster-pdb
  namespace: ecommerce-prod
spec:
  minAvailable: 4  # Keep majority of nodes available
  selector:
    matchLabels:
      app: redis

---
# HorizontalPodAutoscaler (for read replicas only)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-cluster-hpa
  namespace: ecommerce-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: redis-cluster
  minReplicas: 6
  maxReplicas: 9  # Can add more replicas if needed
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 180
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Pods
        value: 1
        periodSeconds: 300

---
# NetworkPolicy for Redis
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-netpol
  namespace: ecommerce-prod
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow access from application services
    - podSelector:
        matchLabels:
          tier: microservice
    # Allow inter-cluster communication
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379
  egress:
  # Allow DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow inter-cluster communication
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379
