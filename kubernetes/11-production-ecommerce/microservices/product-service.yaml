# Product Service - Handles product catalog, search, and inventory
# Heavily read-optimized with caching and multiple replicas

apiVersion: v1
kind: ConfigMap
metadata:
  name: product-service-config
  namespace: ecommerce-prod
data:
  application.yml: |
    server:
      port: 8080
    
    spring:
      application:
        name: product-service
      
      # Database configuration with read/write splitting
      datasource:
        write:
          url: jdbc:postgresql://postgresql-master.ecommerce-prod.svc.cluster.local:5432/ecommerce_db
          username: postgres
          password: ${DB_PASSWORD}
          hikari:
            maximum-pool-size: 10
            minimum-idle: 2
        read:
          url: jdbc:postgresql://postgresql-read-lb.ecommerce-prod.svc.cluster.local:5432/ecommerce_db
          username: postgres
          password: ${DB_PASSWORD}
          hikari:
            maximum-pool-size: 20
            minimum-idle: 5
      
      jpa:
        hibernate:
          ddl-auto: validate
        show-sql: false
        properties:
          hibernate:
            dialect: org.hibernate.dialect.PostgreSQLDialect
      
      # Multi-level caching
      cache:
        type: redis
        redis:
          time-to-live: 600000  # 10 minutes
      
      redis:
        host: redis-cluster.ecommerce-prod.svc.cluster.local
        port: 6379
        password: ${REDIS_PASSWORD}
        timeout: 2000ms
        lettuce:
          pool:
            max-active: 20
            max-idle: 10
            min-idle: 2
    
    # Elasticsearch for product search
    elasticsearch:
      hosts: elasticsearch.ecommerce-prod.svc.cluster.local:9200
      username: elastic
      password: ${ES_PASSWORD}
    
    # Memcached for product catalog caching
    memcached:
      servers: memcached-cluster.ecommerce-prod.svc.cluster.local:11211
      expiration: 3600  # 1 hour
    
    # Application specific settings
    product:
      search:
        indexName: products
        batchSize: 100
      cache:
        popularProducts: 
          ttl: 1800  # 30 minutes
          size: 1000
        categories:
          ttl: 3600  # 1 hour
    
    # Logging
    logging:
      level:
        com.ecommerce.productservice: INFO
        org.springframework.cache: DEBUG
        org.elasticsearch: WARN
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    
    # Management endpoints
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus,caches
      endpoint:
        health:
          show-details: always
      metrics:
        export:
          prometheus:
            enabled: true

---
apiVersion: v1
kind: Secret
metadata:
  name: product-service-secret
  namespace: ecommerce-prod
type: Opaque
data:
  db-password: cGdfc3VwZXJfc2VjdXJl        # pg_super_secure
  redis-password: cmVkaXNfc2VjcmV0MTIz      # redis_secret123
  es-password: ZWxhc3RpY19zZWNyZXQxMjM=    # elastic_secret123

---
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: ecommerce-prod
  labels:
    app: product-service
    tier: microservice
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app: product-service

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: ecommerce-prod
  labels:
    app: product-service
    tier: microservice
spec:
  replicas: 5  # Higher replicas for read-heavy service
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
        tier: microservice
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - product-service
              topologyKey: kubernetes.io/hostname
        # Prefer nodes with SSD for better caching performance
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 80
            preference:
              matchExpressions:
              - key: disk-type
                operator: In
                values:
                - ssd
          - weight: 50
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - application
      containers:
      - name: product-service
        image: ecommerce/product-service:v1.3.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: product-service-secret
              key: db-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: product-service-secret
              key: redis-password
        - name: ES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: product-service-secret
              key: es-password
        - name: JAVA_OPTS
          value: "-Xmx1g -Xms768m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 90
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 36
        resources:
          requests:
            memory: "768Mi"
            cpu: "300m"
          limits:
            memory: "1.5Gi"
            cpu: "1500m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: temp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: product-service-config
      - name: temp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: product-service-pdb
  namespace: ecommerce-prod
spec:
  minAvailable: 3  # Keep majority of replicas available
  selector:
    matchLabels:
      app: product-service

---
# HorizontalPodAutoscaler with custom metrics
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: product-service-hpa
  namespace: ecommerce-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: product-service
  minReplicas: 5
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 65
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  # Custom metric for cache hit ratio
  - type: Pods
    pods:
      metric:
        name: cache_hit_ratio
      target:
        type: AverageValue
        averageValue: "85"  # Scale up if cache hit ratio drops below 85%
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 15
      - type: Pods
        value: 3
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# NetworkPolicy for Product Service
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: product-service-netpol
  namespace: ecommerce-prod
spec:
  podSelector:
    matchLabels:
      app: product-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: api-gateway
    - podSelector:
        matchLabels:
          app: frontend
    - podSelector:
        matchLabels:
          app: order-service
    - podSelector:
        matchLabels:
          app: inventory-service
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow database access (read replicas)
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
          role: slave
    - podSelector:
        matchLabels:
          app: pgpool
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis access
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow Elasticsearch access
  - to:
    - podSelector:
        matchLabels:
          app: elasticsearch
    ports:
    - protocol: TCP
      port: 9200
  # Allow Memcached access
  - to:
    - podSelector:
        matchLabels:
          app: memcached
    ports:
    - protocol: TCP
      port: 11211
