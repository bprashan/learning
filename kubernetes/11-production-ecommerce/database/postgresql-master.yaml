# PostgreSQL Master Database StatefulSet
# Handles all write operations for the e-commerce platform
# Configured for high availability with persistent storage

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-master-config
  namespace: ecommerce-prod
data:
  postgresql.conf: |
    # PostgreSQL Master Configuration
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # Write-Ahead Logging (WAL) for replication
    wal_level = replica
    max_wal_senders = 10
    max_replication_slots = 10
    hot_standby = on
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = '/var/log/postgresql'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'mod'
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    
    # Performance tuning
    checkpoint_timeout = 10min
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100

  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             0.0.0.0/0               md5
    # Replication connections
    host    replication     replicator      0.0.0.0/0               md5

---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-master-secret
  namespace: ecommerce-prod
type: Opaque
data:
  postgres-password: cGdfc3VwZXJfc2VjdXJl  # pg_super_secure (base64)
  replication-password: cmVwbF9zZWNyZXQxMjM=   # repl_secret123 (base64)

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-master
  namespace: ecommerce-prod
  labels:
    app: postgresql
    role: master
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgresql
    role: master

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-master
  namespace: ecommerce-prod
  labels:
    app: postgresql
    role: master
spec:
  serviceName: postgresql-master
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      role: master
  template:
    metadata:
      labels:
        app: postgresql
        role: master
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: postgresql
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "ecommerce_db"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-master-secret
              key: postgres-password
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-master-secret
              key: replication-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        volumeMounts:
        - name: postgresql-master-storage
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgresql-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-master-config
      - name: init-script
        configMap:
          name: postgresql-init-script
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: postgresql-master-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init-script
  namespace: ecommerce-prod
data:
  01-init-replication.sh: |
    #!/bin/bash
    set -e
    
    echo "Creating replication user..."
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        CREATE USER replicator REPLICATION LOGIN CONNECTION LIMIT 100 ENCRYPTED PASSWORD '$POSTGRES_REPLICATION_PASSWORD';
    EOSQL
    
    echo "Creating e-commerce database schema..."
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        -- Users table
        CREATE TABLE IF NOT EXISTS users (
            user_id SERIAL PRIMARY KEY,
            username VARCHAR(50) UNIQUE NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            first_name VARCHAR(50),
            last_name VARCHAR(50),
            phone VARCHAR(20),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT true
        );
        
        -- Products table
        CREATE TABLE IF NOT EXISTS products (
            product_id SERIAL PRIMARY KEY,
            name VARCHAR(200) NOT NULL,
            description TEXT,
            price DECIMAL(10,2) NOT NULL,
            category_id INTEGER,
            brand VARCHAR(100),
            sku VARCHAR(100) UNIQUE NOT NULL,
            stock_quantity INTEGER DEFAULT 0,
            image_url VARCHAR(500),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT true
        );
        
        -- Categories table
        CREATE TABLE IF NOT EXISTS categories (
            category_id SERIAL PRIMARY KEY,
            name VARCHAR(100) NOT NULL,
            parent_id INTEGER REFERENCES categories(category_id),
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- Orders table (partitioned by month)
        CREATE TABLE IF NOT EXISTS orders (
            order_id SERIAL,
            user_id INTEGER NOT NULL REFERENCES users(user_id),
            order_status VARCHAR(20) DEFAULT 'pending',
            total_amount DECIMAL(10,2) NOT NULL,
            shipping_address TEXT,
            billing_address TEXT,
            payment_method VARCHAR(50),
            payment_status VARCHAR(20) DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (order_id, created_at)
        ) PARTITION BY RANGE (created_at);
        
        -- Create initial partition for current month
        CREATE TABLE orders_2025_09 PARTITION OF orders
        FOR VALUES FROM ('2025-09-01') TO ('2025-10-01');
        
        -- Order items table
        CREATE TABLE IF NOT EXISTS order_items (
            order_item_id SERIAL PRIMARY KEY,
            order_id INTEGER NOT NULL,
            product_id INTEGER NOT NULL REFERENCES products(product_id),
            quantity INTEGER NOT NULL,
            price DECIMAL(10,2) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- Shopping cart table
        CREATE TABLE IF NOT EXISTS shopping_cart (
            cart_id SERIAL PRIMARY KEY,
            user_id INTEGER NOT NULL REFERENCES users(user_id),
            product_id INTEGER NOT NULL REFERENCES products(product_id),
            quantity INTEGER NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- Inventory table
        CREATE TABLE IF NOT EXISTS inventory (
            inventory_id SERIAL PRIMARY KEY,
            product_id INTEGER NOT NULL REFERENCES products(product_id),
            warehouse_location VARCHAR(100),
            quantity_available INTEGER NOT NULL,
            reserved_quantity INTEGER DEFAULT 0,
            last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        -- Create indexes for performance
        CREATE INDEX IF NOT EXISTS idx_products_category ON products(category_id);
        CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku);
        CREATE INDEX IF NOT EXISTS idx_orders_user ON orders(user_id);
        CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(order_status);
        CREATE INDEX IF NOT EXISTS idx_orders_created ON orders(created_at);
        CREATE INDEX IF NOT EXISTS idx_order_items_order ON order_items(order_id);
        CREATE INDEX IF NOT EXISTS idx_order_items_product ON order_items(product_id);
        CREATE INDEX IF NOT EXISTS idx_cart_user ON shopping_cart(user_id);
        CREATE INDEX IF NOT EXISTS idx_inventory_product ON inventory(product_id);
        
        -- Insert sample categories
        INSERT INTO categories (name, description) VALUES 
        ('Electronics', 'Electronic devices and accessories'),
        ('Clothing', 'Fashion and apparel'),
        ('Books', 'Physical and digital books'),
        ('Home & Garden', 'Home improvement and garden supplies'),
        ('Sports', 'Sports equipment and accessories')
        ON CONFLICT DO NOTHING;
        
        -- Insert sample products
        INSERT INTO products (name, description, price, category_id, brand, sku, stock_quantity) VALUES 
        ('iPhone 15 Pro', 'Latest iPhone with advanced features', 999.99, 1, 'Apple', 'IPHONE15PRO', 100),
        ('Samsung Galaxy S24', 'Flagship Android smartphone', 899.99, 1, 'Samsung', 'GALAXYS24', 150),
        ('MacBook Pro M3', 'High-performance laptop for professionals', 1999.99, 1, 'Apple', 'MBPROM3', 50),
        ('Nike Air Max', 'Comfortable running shoes', 129.99, 2, 'Nike', 'AIRMAX2024', 200),
        ('Levi 501 Jeans', 'Classic denim jeans', 59.99, 2, 'Levis', 'LEVI501', 300)
        ON CONFLICT (sku) DO NOTHING;
        
        -- Create database monitoring user
        CREATE USER monitoring WITH PASSWORD 'monitoring123';
        GRANT CONNECT ON DATABASE ecommerce_db TO monitoring;
        GRANT USAGE ON SCHEMA public TO monitoring;
        GRANT SELECT ON ALL TABLES IN SCHEMA public TO monitoring;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO monitoring;
    EOSQL
    
    echo "Database initialization completed successfully!"

---
# PodDisruptionBudget to ensure availability during maintenance
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgresql-master-pdb
  namespace: ecommerce-prod
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: postgresql
      role: master
