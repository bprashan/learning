# Basic Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: webapp-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webapp-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Advanced HPA with custom metrics and behavior
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: advanced-webapp-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webapp-deployment
  minReplicas: 3
  maxReplicas: 50
  
  metrics:
  # CPU utilization
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  
  # Memory utilization
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  
  # Custom application metric (requests per second)
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  
  # External metric (queue length from external service)
  - type: External
    external:
      metric:
        name: queue_length
        selector:
          matchLabels:
            queue: webapp-tasks
      target:
        type: Value
        value: "50"
  
  # Scaling behavior configuration
  behavior:
    scaleUp:
      # Stabilization window for scale up
      stabilizationWindowSeconds: 30
      policies:
      # Allow 100% increase in replicas every 15 seconds
      - type: Percent
        value: 100
        periodSeconds: 15
      # Allow adding 4 replicas every 60 seconds
      - type: Pods
        value: 4
        periodSeconds: 60
      # Use the policy that allows more replicas
      selectPolicy: Max
    
    scaleDown:
      # Stabilization window for scale down (prevent flapping)
      stabilizationWindowSeconds: 300
      policies:
      # Allow 10% decrease in replicas every 60 seconds
      - type: Percent
        value: 10
        periodSeconds: 60
      # Allow removing 2 replicas every 60 seconds
      - type: Pods
        value: 2
        periodSeconds: 60
      # Use the policy that removes fewer replicas
      selectPolicy: Min
---
# Sample deployment to be scaled by HPA
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: webapp
        image: nginx:1.21
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8080
          name: metrics
        
        # Resource requests and limits are required for HPA
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        
        # Health probes
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
        
        # Environment variables
        env:
        - name: MAX_CONNECTIONS
          value: "100"
        - name: WORKER_PROCESSES
          value: "2"
---
# Service for the webapp
apiVersion: v1
kind: Service
metadata:
  name: webapp-service
  namespace: default
spec:
  selector:
    app: webapp
  ports:
  - port: 80
    targetPort: 80
    name: http
  - port: 8080
    targetPort: 8080
    name: metrics
---
# Load testing pod to test HPA
apiVersion: v1
kind: Pod
metadata:
  name: load-tester
  namespace: default
spec:
  containers:
  - name: load-tester
    image: busybox:1.35
    command: ["/bin/sh"]
    args:
      - -c
      - |
        echo "Starting load test..."
        while true; do
          for i in $(seq 1 100); do
            wget -q -O- http://webapp-service/
          done
          echo "Completed 100 requests"
          sleep 1
        done
    resources:
      requests:
        cpu: 50m
        memory: 32Mi
      limits:
        cpu: 100m
        memory: 64Mi
  restartPolicy: Never
---
# Vertical Pod Autoscaler example
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: webapp-vpa
  namespace: default
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webapp-deployment
  
  # VPA update policy
  updatePolicy:
    updateMode: "Auto"  # Can be "Off", "Initial", "Recreation", or "Auto"
  
  # Resource policy (optional)
  resourcePolicy:
    containerPolicies:
    - containerName: webapp
      # Minimum resources
      minAllowed:
        cpu: 50m
        memory: 64Mi
      # Maximum resources
      maxAllowed:
        cpu: 500m
        memory: 512Mi
      # Controlled resources
      controlledResources: ["cpu", "memory"]
      # Controlled values (can be RequestsAndLimits, RequestsOnly)
      controlledValues: RequestsAndLimits
---
# Pod Disruption Budget to ensure availability during scaling
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: webapp-pdb
  namespace: default
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: webapp
---
# Priority Class for important workloads
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority
value: 1000
globalDefault: false
description: "High priority class for critical applications"
---
# Updated deployment with priority class and node affinity
apiVersion: apps/v1
kind: Deployment
metadata:
  name: priority-webapp-deployment
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: priority-webapp
  template:
    metadata:
      labels:
        app: priority-webapp
    spec:
      priorityClassName: high-priority
      
      # Node affinity - prefer nodes with SSD
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: disk-type
                operator: In
                values:
                - ssd
        
        # Pod anti-affinity - spread across nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - priority-webapp
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: webapp
        image: nginx:1.21
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
