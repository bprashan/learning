# PowerShell script to troubleshoot and fix the deployment issue
param(
    [Parameter(Mandatory=$false)]
    [string]$DeploymentName = "web-app-deployment",
    
    [Parameter(Mandatory=$false)]
    [string]$Namespace = "default"
)

Write-Host "🔧 Deployment Troubleshooting & Recovery Script" -ForegroundColor Green
Write-Host "=" * 60

# Step 1: Check current pod status
Write-Host "`n📊 Step 1: Current Pod Status" -ForegroundColor Yellow
kubectl get pods -l app=web-app -o wide

# Step 2: Analyze the problem
Write-Host "`n🔍 Step 2: Analyzing Pod Issues" -ForegroundColor Yellow

$pods = kubectl get pods -l app=web-app -o jsonpath='{.items[*].metadata.name}' 
$podArray = $pods -split ' '

foreach ($pod in $podArray) {
    if ($pod) {
        Write-Host "`nAnalyzing pod: $pod" -ForegroundColor Cyan
        
        # Check pod status
        $podStatus = kubectl get pod $pod -o jsonpath='{.status.phase}'
        $containerStatuses = kubectl get pod $pod -o jsonpath='{.status.containerStatuses[*].state}'
        
        Write-Host "  Pod Status: $podStatus" -ForegroundColor White
        
        # Check init container logs
        Write-Host "  Init Container Logs:" -ForegroundColor Magenta
        try {
            $initLogs = kubectl logs $pod -c init-config
            $initLogs | ForEach-Object { Write-Host "    $_" -ForegroundColor Gray }
        } catch {
            Write-Host "    No init container logs available" -ForegroundColor Red
        }
        
        # Check main container logs if available
        Write-Host "  Main Container Logs:" -ForegroundColor Magenta
        try {
            $mainLogs = kubectl logs $pod -c web-app --tail=10
            if ($mainLogs) {
                $mainLogs | ForEach-Object { Write-Host "    $_" -ForegroundColor Gray }
            } else {
                Write-Host "    No main container logs available" -ForegroundColor Red
            }
        } catch {
            Write-Host "    Main container not started yet" -ForegroundColor Red
        }
        
        # Check events for this pod
        Write-Host "  Recent Events:" -ForegroundColor Magenta
        $events = kubectl get events --field-selector involvedObject.name=$pod --sort-by='.lastTimestamp' --tail=5 -o custom-columns=TIME:.lastTimestamp,REASON:.reason,MESSAGE:.message --no-headers
        if ($events) {
            $events | ForEach-Object { Write-Host "    $_" -ForegroundColor Gray }
        } else {
            Write-Host "    No recent events" -ForegroundColor Gray
        }
    }
}

# Step 3: Show the problem and solution
Write-Host "`n🚨 Step 3: Problem Analysis" -ForegroundColor Red
Write-Host "PROBLEM IDENTIFIED:" -ForegroundColor Red
Write-Host "The nginx configuration generated by init container is invalid." -ForegroundColor White
Write-Host "ERROR: 'server_name' directive is not allowed outside server block" -ForegroundColor White

Write-Host "`nROOT CAUSE:" -ForegroundColor Yellow
Write-Host "The init container was creating an invalid nginx config file:" -ForegroundColor White
Write-Host "  echo 'server_name web-app;' > /shared/nginx.conf" -ForegroundColor Red
Write-Host "`nThis creates a config file with just:" -ForegroundColor White
Write-Host "  server_name web-app;" -ForegroundColor Red
Write-Host "`nBut nginx requires server_name to be inside a server block!" -ForegroundColor White

# Step 4: Apply the fix
Write-Host "`n✅ Step 4: Applying Fix" -ForegroundColor Green
Write-Host "The deployment-advanced.yaml has been updated with correct nginx config." -ForegroundColor White
Write-Host "Applying the fixed deployment..." -ForegroundColor Yellow

kubectl apply -f deployment-advanced.yaml

if ($LASTEXITCODE -eq 0) {
    Write-Host "✅ Fixed deployment applied successfully" -ForegroundColor Green
} else {
    Write-Host "❌ Failed to apply fixed deployment" -ForegroundColor Red
    exit 1
}

# Step 5: Clean up old pods
Write-Host "`n🧹 Step 5: Cleaning Up Failed Pods" -ForegroundColor Yellow
Write-Host "Deleting failed pods to trigger recreation with new config..." -ForegroundColor White

$failedPods = kubectl get pods -l app=web-app -o jsonpath='{.items[?(@.status.phase!="Running")].metadata.name}'
if ($failedPods) {
    $failedPodArray = $failedPods -split ' '
    foreach ($failedPod in $failedPodArray) {
        if ($failedPod) {
            Write-Host "Deleting failed pod: $failedPod" -ForegroundColor Cyan
            kubectl delete pod $failedPod
        }
    }
} else {
    Write-Host "No failed pods to delete" -ForegroundColor Green
}

# Step 6: Monitor recovery
Write-Host "`n⏳ Step 6: Monitoring Recovery" -ForegroundColor Yellow
Write-Host "Waiting for pods to recover..." -ForegroundColor White

# Wait for rollout to complete
kubectl rollout status deployment/$DeploymentName --timeout=300s

if ($LASTEXITCODE -eq 0) {
    Write-Host "✅ Deployment recovery successful!" -ForegroundColor Green
} else {
    Write-Host "⚠️ Deployment recovery taking longer than expected" -ForegroundColor Yellow
}

# Step 7: Validate the fix
Write-Host "`n🔍 Step 7: Validating the Fix" -ForegroundColor Yellow

Start-Sleep -Seconds 10  # Give pods time to start

$newPods = kubectl get pods -l app=web-app -o jsonpath='{.items[*].metadata.name}'
$newPodArray = $newPods -split ' '

foreach ($pod in $newPodArray) {
    if ($pod) {
        $podStatus = kubectl get pod $pod -o jsonpath='{.status.phase}'
        $readyContainers = kubectl get pod $pod -o jsonpath='{.status.containerStatuses[?(@.ready==true)].name}'
        
        Write-Host "`nPod: $pod" -ForegroundColor Cyan
        Write-Host "  Status: $podStatus" -ForegroundColor $(if ($podStatus -eq "Running") { "Green" } else { "Red" })
        Write-Host "  Ready Containers: $readyContainers" -ForegroundColor White
        
        if ($podStatus -eq "Running") {
            # Test the nginx config
            try {
                Write-Host "  Testing nginx config:" -ForegroundColor Magenta
                $configTest = kubectl exec $pod -c web-app -- nginx -t 2>&1
                $configTest | ForEach-Object { Write-Host "    $_" -ForegroundColor Gray }
                
                # Test health endpoint
                Write-Host "  Testing health endpoint:" -ForegroundColor Magenta
                $healthTest = kubectl exec $pod -c web-app -- curl -s -w "%{http_code}" -o /dev/null localhost/health
                Write-Host "    Health endpoint response: $healthTest" -ForegroundColor $(if ($healthTest -eq "200") { "Green" } else { "Red" })
                
                # Show the generated config
                Write-Host "  Generated nginx config:" -ForegroundColor Magenta
                $generatedConfig = kubectl exec $pod -c web-app -- cat /etc/nginx/conf.d/default.conf
                $generatedConfig | ForEach-Object { Write-Host "    $_" -ForegroundColor Gray }
                
            } catch {
                Write-Host "    Could not test pod - may still be starting" -ForegroundColor Yellow
            }
        }
    }
}

# Step 8: Final status
Write-Host "`n📊 Step 8: Final Status" -ForegroundColor Green
kubectl get pods -l app=web-app -o wide
kubectl get deployment $DeploymentName

# Summary
Write-Host "`n📋 SUMMARY" -ForegroundColor Green
Write-Host "=" * 60

Write-Host "WHAT WAS WRONG:" -ForegroundColor Red
Write-Host "• Init container created invalid nginx config" -ForegroundColor White
Write-Host "• server_name directive was outside server block" -ForegroundColor White
Write-Host "• Nginx failed to start, causing CrashLoopBackOff" -ForegroundColor White

Write-Host "`nWHAT WAS FIXED:" -ForegroundColor Green
Write-Host "• Created proper nginx server block configuration" -ForegroundColor White
Write-Host "• Added /health endpoint for probes" -ForegroundColor White
Write-Host "• Updated health check path to use /health" -ForegroundColor White

Write-Host "`nTHE FIXED CONFIG:" -ForegroundColor Cyan
Write-Host @"
server {
    listen 80;
    server_name web-app;
    
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
    }
    
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
"@ -ForegroundColor White

Write-Host "`n💡 LESSONS LEARNED:" -ForegroundColor Yellow
Write-Host "• Always validate configuration syntax in init containers" -ForegroundColor White
Write-Host "• Test nginx config with 'nginx -t' command" -ForegroundColor White
Write-Host "• Use proper server blocks for nginx directives" -ForegroundColor White
Write-Host "• Create dedicated health endpoints for probes" -ForegroundColor White

Write-Host "`n🎯 NEXT STEPS:" -ForegroundColor Cyan
Write-Host "kubectl port-forward deployment/$DeploymentName 8080:80" -ForegroundColor White
Write-Host "curl http://localhost:8080" -ForegroundColor White
Write-Host "curl http://localhost:8080/health" -ForegroundColor White

Write-Host "`n✅ TROUBLESHOOTING COMPLETE!" -ForegroundColor Green
